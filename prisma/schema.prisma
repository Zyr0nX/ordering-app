generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id            String      @id @default(cuid())
  name          String?
  email         String?     @unique
  emailVerified DateTime?
  image         String?
  role          Role
  accounts      Account[]
  sessions      Session[]
  Restaurant    Restaurant?
  Cart          Cart?
  Favorite      Favorite[]
  Shipper       Shipper?
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Restaurant {
  id                String          @id @default(cuid())
  name              String
  address           String
  additionalAddress String?
  firstName         String
  lastName          String
  phoneNumber       String
  approved          Approve         @default(PENDING)
  userId            String          @unique
  food              Food[]
  restaurantType    RestaurantType? @relation(fields: [restaurantTypeId], references: [id])
  brandImage        String?
  user              User            @relation(fields: [userId], references: [id])
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
  restaurantTypeId  String?
  Favorite          Favorite[]

  @@index([restaurantTypeId])
}

model RestaurantType {
  id         String       @id @default(cuid())
  name       String
  restaurant Restaurant[]
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
}

model Food {
  id           String     @id @default(cuid())
  name         String
  description  String
  price        Float      @db.Float
  calories     Int
  image        String
  restaurantId String
  restaurant   Restaurant @relation(fields: [restaurantId], references: [id])
  Cart         Cart[]
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt

  @@index([restaurantId])
}

model Cart {
  id       String @id @default(cuid())
  userId   String @unique
  foodId   String
  quantity Int
  user     User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  food     Food   @relation(fields: [foodId], references: [id], onDelete: Cascade)

  @@unique([userId, foodId])
  @@index([foodId])
}

model Favorite {
  id           String     @id @default(cuid())
  userId       String
  restaurantId String
  user         User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  restaurant   Restaurant @relation(fields: [restaurantId], references: [id], onDelete: Cascade)

  @@unique([userId, restaurantId])
  @@index([restaurantId])
}

model Shipper {
  id          String   @id @default(cuid())
  firstName   String
  lastName    String
  dateOfBirth DateTime
  ssn         String
  phone       String
  avatar      String?
  approved    Approve  @default(PENDING)
  userId      String   @unique
  user        User     @relation(fields: [userId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

enum Role {
  USER
  RESTAURANT
  SHIPPER
  ADMIN
}

enum Approve {
  PENDING
  APPROVED
  REJECTED
}
