generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id                String      @id @default(cuid())
  name              String?
  email             String?     @unique
  emailVerified     DateTime?
  image             String?
  role              Role
  address           String?
  addressId         String?
  latitude          Float?      @db.Double
  longitude         Float?      @db.Double
  additionalAddress String?
  phoneNumber       String?
  status            Status      @default(ENABLED)
  accounts          Account[]
  sessions          Session[]
  restaurant        Restaurant?
  cartItem          CartItem[]
  favorite          Favorite[]
  shipper           Shipper?
  order             Order[]
  stripeCustomerId  String?

  @@index([id])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Restaurant {
  id                String     @id @default(cuid())
  name              String
  address           String
  addressId         String
  latitude          Float      @db.Double
  longitude         Float      @db.Double
  additionalAddress String?
  firstName         String
  lastName          String
  phoneNumber       String
  approved          Approve    @default(PENDING)
  userId            String     @unique
  food              Food[]
  cuisine           Cuisine    @relation(fields: [cuisineId], references: [id])
  image             String?
  user              User       @relation(fields: [userId], references: [id])
  createdAt         DateTime   @default(now())
  updatedAt         DateTime   @updatedAt
  cuisineId         String
  favorite          Favorite[]
  order             Order[]

  @@index([cuisineId])
}

model Cuisine {
  id         String       @id @default(cuid())
  name       String
  image      String
  restaurant Restaurant[]
}

model Food {
  id           String       @id @default(cuid())
  name         String
  description  String?
  price        Float        @db.Float
  image        String
  restaurantId String
  restaurant   Restaurant   @relation(fields: [restaurantId], references: [id])
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  foodOption   FoodOption[]
  quantity     Int
  cartItem     CartItem[]

  @@index([restaurantId])
}

model CartItem {
  id         String           @id @default(cuid())
  foodId     String
  food       Food             @relation(fields: [foodId], references: [id], onDelete: Cascade)
  quantity   Int
  foodOption FoodOptionItem[]
  createdAt  DateTime         @default(now())
  updatedAt  DateTime         @updatedAt
  userId     String
  user       User             @relation(fields: [userId], references: [id])

  @@index([foodId])
  @@index([userId])
}

model Favorite {
  id           String     @id @default(cuid())
  userId       String
  restaurantId String
  user         User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  restaurant   Restaurant @relation(fields: [restaurantId], references: [id], onDelete: Cascade)

  @@unique([userId, restaurantId])
  @@index([restaurantId])
}

model Shipper {
  id                   String           @id @default(cuid())
  firstName            String
  lastName             String
  dateOfBirth          DateTime
  identificationNumber String
  phoneNumber          String
  licensePlate         String
  image                String?
  approved             Approve          @default(PENDING)
  userId               String           @unique
  user                 User             @relation(fields: [userId], references: [id])
  createdAt            DateTime         @default(now())
  updatedAt            DateTime         @updatedAt
  order                Order[]
  shipperLocation      ShipperLocation?
}

model ShipperLocation {
  id        String   @id @default(cuid())
  latitude  Float    @db.Double
  longitude Float    @db.Double
  shipperId String   @unique
  shipper   Shipper  @relation(fields: [shipperId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([shipperId])
}

model FoodOption {
  id             String           @id @default(cuid())
  name           String
  foodId         String
  food           Food             @relation(fields: [foodId], references: [id], onDelete: Cascade)
  maxOption      Int
  foodOptionItem FoodOptionItem[]

  @@index([foodId])
}

model FoodOptionItem {
  id           String     @id @default(cuid())
  name         String
  foodOptionId String
  foodOption   FoodOption @relation(fields: [foodOptionId], references: [id], onDelete: Cascade)
  price        Float      @db.Float
  cartItem     CartItem[]

  @@index([foodOptionId])
}

model Order {
  id                     Int         @id @default(autoincrement())
  userId                 String
  user                   User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  userAddress            String
  userAddressId          String
  userLatitude           Float       @db.Double
  userLongitude          Float       @db.Double
  restaurantId           String
  restaurant             Restaurant  @relation(fields: [restaurantId], references: [id])
  restaurantAddress      String
  restaurantAddressId    String
  restaurantLatitude     Float       @db.Double
  restaurantLongitude    Float       @db.Double
  restaurantCancelReason String?
  shipperId              String?
  shipper                Shipper?    @relation(fields: [shipperId], references: [id])
  shipperCancelReason    String?
  shippingFee            Float       @db.Float
  restaurantRating       Int?
  shipperRating          Int?
  paymentIntentId        String      @unique
  status                 OrderStatus @default(PLACED)
  createdAt              DateTime    @default(now())
  updatedAt              DateTime    @updatedAt
  orderFood              OrderFood[]

  @@index([userId])
  @@index([shipperId])
  @@index([restaurantId])
}

model OrderFood {
  id         String @id @default(cuid())
  orderId    Int
  order      Order  @relation(fields: [orderId], references: [id], onDelete: Cascade)
  foodName   String
  foodOption String
  price      Float  @db.Float
  quantity   Int

  @@index([orderId])
}

model StripeEvent {
  id               String   @id @unique
  api_version      String?
  data             Json
  request          Json?
  type             String
  object           String
  account          String?
  created          DateTime
  livemode         Boolean
  pending_webhooks Int
}

enum Role {
  USER
  RESTAURANT
  SHIPPER
  ADMIN
}

enum Approve {
  PENDING
  APPROVED
  REJECTED
  DISABLED
}

enum OrderStatus {
  PLACED
  PREPARING
  REJECTED_BY_RESTAURANT
  READY_FOR_PICKUP
  DELIVERING
  REJECTED_BY_SHIPPER
  DELIVERED
}

enum CartStatus {
  NOT_ORDERED
  ORDERED
}

enum StripeSubscriptionStatus {
  incomplete
  incomplete_expired
  trialing
  active
  past_due
  canceled
  unpaid
  paused
}

enum Status {
  ENABLED
  DISABLED
}
