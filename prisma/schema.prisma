generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id                       String                    @id @default(cuid())
  name                     String?
  email                    String?                   @unique
  emailVerified            DateTime?
  image                    String?
  role                     Role
  address                  String?
  accounts                 Account[]
  sessions                 Session[]
  restaurant               Restaurant?
  cartItem                 CartItem[]
  favorite                 Favorite[]
  shipper                  Shipper?
  Order                    Order[]
  stripeCustomerId         String?
  stripeSubscriptionId     String?
  stripeSubscriptionStatus StripeSubscriptionStatus?

  @@index([id])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Restaurant {
  id                String          @id @default(cuid())
  name              String
  address           String
  additionalAddress String?
  firstName         String
  lastName          String
  phoneNumber       String
  approved          Approve         @default(PENDING)
  userId            String          @unique
  food              Food[]
  restaurantType    RestaurantType? @relation(fields: [restaurantTypeId], references: [id])
  brandImage        String?
  user              User            @relation(fields: [userId], references: [id])
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
  restaurantTypeId  String?
  favorite          Favorite[]
  Order             Order[]

  @@index([restaurantTypeId])
}

model RestaurantType {
  id         String       @id @default(cuid())
  name       String
  restaurant Restaurant[]
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
}

model Food {
  id           String       @id @default(cuid())
  name         String
  description  String
  price        Float        @db.Float
  calories     Int
  image        String
  restaurantId String
  restaurant   Restaurant   @relation(fields: [restaurantId], references: [id])
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  foodOption   FoodOption[]
  quantity     Int
  cartItem     CartItem[]

  @@index([restaurantId])
}

model CartItem {
  id         String           @id @default(cuid())
  foodId     String
  food       Food             @relation(fields: [foodId], references: [id], onDelete: Cascade)
  quantity   Int
  foodOption FoodOptionItem[]
  createdAt  DateTime         @default(now())
  updatedAt  DateTime         @updatedAt
  userId     String
  user       User             @relation(fields: [userId], references: [id])

  @@index([foodId])
  @@index([userId])
}

model Favorite {
  id           String     @id @default(cuid())
  userId       String
  restaurantId String
  user         User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  restaurant   Restaurant @relation(fields: [restaurantId], references: [id], onDelete: Cascade)

  @@unique([userId, restaurantId])
  @@index([restaurantId])
}

model Shipper {
  id          String   @id @default(cuid())
  firstName   String
  lastName    String
  dateOfBirth DateTime
  ssn         String
  phone       String
  avatar      String?
  approved    Approve  @default(PENDING)
  userId      String   @unique
  user        User     @relation(fields: [userId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  Order       Order[]
}

model FoodOption {
  id             String           @id @default(cuid())
  name           String
  foodId         String
  food           Food             @relation(fields: [foodId], references: [id], onDelete: Cascade)
  maxOption      Int
  foodOptionItem FoodOptionItem[]

  @@index([foodId])
}

model FoodOptionItem {
  id           String     @id @default(cuid())
  name         String
  foodOptionId String
  foodOption   FoodOption @relation(fields: [foodOptionId], references: [id], onDelete: Cascade)
  price        Float      @db.Float
  cartItem     CartItem[]

  @@index([foodOptionId])
}

model Order {
  id           String      @id @default(cuid())
  userId       String
  user         User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  items        Json
  restaurantId String
  restaurant   Restaurant  @relation(fields: [restaurantId], references: [id])
  shipperId    String?
  shipper      Shipper?    @relation(fields: [shipperId], references: [id])
  status       OrderStatus @default(NOT_PAID)
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt

  @@index([userId])
  @@index([shipperId])
  @@index([restaurantId])
}

model StripeEvent {
  id               String   @id @unique
  api_version      String?
  data             Json
  request          Json?
  type             String
  object           String
  account          String?
  created          DateTime
  livemode         Boolean
  pending_webhooks Int
}

enum Role {
  USER
  RESTAURANT
  SHIPPER
  ADMIN
}

enum Approve {
  PENDING
  APPROVED
  REJECTED
}

enum OrderStatus {
  NOT_PAID
  PAID
  PREPARING
  DELIVERING
  DELIVERED
}

enum CartStatus {
  NOT_ORDERED
  ORDERED
}

enum StripeSubscriptionStatus {
  incomplete
  incomplete_expired
  trialing
  active
  past_due
  canceled
  unpaid
  paused
}
